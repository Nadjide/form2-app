name: CI/CD Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

env:
  REACT_APP_SERVER_URL: ${{ secrets.REACT_APP_SERVER_URL }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run tests
        run: npm run test:unit

      - name: Generate documentation
        run: npm run jsdoc

      - name: Build application
        run: npm run build
        env:
          REACT_APP_SERVER_URL: ${{ env.REACT_APP_SERVER_URL }}

  e2e:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Start Docker Compose
        run: |
          docker compose up -d
          echo "Waiting for services to be ready..."
          sleep 60

      - name: Check services health
        run: |
          echo "Checking MySQL..."
          docker compose exec mysql mysqladmin ping -h localhost --silent
          echo "Checking Frontend..."
          curl -f http://localhost:3000 || (echo "Frontend not ready" && exit 1)
          echo "Checking Backend..."
          curl -f http://localhost:8000 || (echo "Backend not ready" && exit 1)
          echo "All services are ready!"

      - name: Run Cypress E2E tests
        uses: cypress-io/github-action@v6
        with:
          wait-on: 'http://localhost:3000, http://localhost:8000'
          wait-on-timeout: 180

      - name: Stop Docker Compose
        run: docker compose down
        if: always() 